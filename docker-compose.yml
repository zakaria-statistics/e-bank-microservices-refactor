version: "3.8"
services:
  # Eureka Discovery Service
  discovery-service:
    build:
      context: ./discovery-service
    container_name: "discovery-service"
    environment:
      - SERVER_PORT=8761
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  # API Gateway Service
  gateway-service:
    build:
      context: ./gateway-service
    container_name: "gateway-service"
    depends_on:
      config-service:
        condition: service_healthy
    environment:
      - SERVER_PORT=8888
      - EUREKA_SERVER_URL=http://discovery-service:8761/eureka/
      - CONFIG_SERVER_URL=http://config-service:9999/
    ports:
      - "8888:8888"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  # Config Service
  config-service:
    build:
      context: ./config-service
    container_name: "config-service"
    depends_on:
      discovery-service:
        condition: service_healthy
    environment:
      - SERVER_PORT=9999
      - EUREKA_SERVER_URL=http://discovery-service:8761/eureka
    ports:
      - "9999:9999"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9999/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  # Customer Service
  customer-service:
    build:
      context: ./customer-service
    container_name: "customer-service"
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      customer-mysql:
        condition: service_healthy
    environment:
      - SERVER_PORT=9091
      - EUREKA_SERVER_URL=http://discovery-service:8761/eureka/
      - CONFIG_SERVER_URL=http://config-service:9999/
      - SPRING_DATASOURCE_URL=jdbc:mysql://customer-mysql:3306/customer-db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpassword
    ports:
      - "9091:9091"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  # Account Service
  account-service:
    build:
      context: ./account-service
    container_name: "account-service"
    depends_on:
      customer-service:
        condition: service_healthy
      account-postgres:
        condition: service_healthy
    environment:
      - SERVER_PORT=9092
      - EUREKA_SERVER_URL=http://discovery-service:8761/eureka/
      - CONFIG_SERVER_URL=http://config-service:9999/
      - SPRING_DATASOURCE_URL=jdbc:postgres://account-postgres:5432/account-db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgrespassword
    ports:
      - "9092:9092"
    networks:
      - app-network
  # MySQL for Customer Service
  customer-mysql:
    image: mysql:8.0
    container_name: customer-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=customer-db
    ports:
      - "3306:3306"
    volumes:
      - customer-mysql-data:/var/lib/mysql
    networks:
      - app-network

  # PostgreSQL for Account Service
  account-postgres:
    image: postgres:13
    container_name: account-postgres
    environment:
      - POSTGRES_PASSWORD=postgrespassword
      - POSTGRES_DB=account-db
    ports:
      - "5432:5432"
    volumes:
      - account-postgres-data:/var/lib/postgres/data
    networks:
      - app-network

  # Angular Frontend
  angular-client:
    build:
      context: ./angular-client
    container_name: angular-client
    depends_on:
      gateway-service:
        condition: service_healthy
    ports:
      - "4200:80" # Map host port 4200 to container's nginx (Angular app)
    networks:
      - app-network

volumes:
  customer-mysql-data:
  account-postgres-data:

networks:
  app-network:
    driver: bridge